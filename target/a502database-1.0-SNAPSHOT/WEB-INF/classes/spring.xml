<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
<!--       扫描组件，除了控制层-->
    <context:component-scan base-package="com">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
<!--    引入jdbc.properties-->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
<!--    配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>

    </bean>
<!--    配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
<!--    开启事务的注解驱动-->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>
<!--    与mybaties整合-->
<!--    创建sqlsessionFactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        可以设置核心配置文件的路径-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
<!--        也可以设置属性来创建bean对象-->
        <property name="dataSource" ref="dataSource"></property>
<!--        设置类型别名对应的包，在mapper.xml中就不用指定全类名-->
        <property name="typeAliasesPackage" value="com.pojo"></property>
<!--        如果映射文件与接口的路径和名称一致可以不设置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>
<!--    扫描mapper接口，并使用代理模式将接口变为实现类再注册到IOC中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mapper"></property>
    </bean>
<!--    配置用户登录的Map集合，token为key,User为value-->
    <bean id="loggedUsers" class="java.util.HashMap">

    </bean>
</beans>
